generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id @default(cuid())
  email            String               @unique
  name             String?
  avatar           String?
  emailVerified    DateTime?
  password         String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  isActive         Boolean              @default(true)
  lastLoginAt      DateTime?
  userType         UserType             @default(INDIVIDUAL)
  profession       String?
  bio              String?
  timezone         String?              @default("UTC")
  accounts         Account[]
  documentShares   DocumentShare[]
  documentVersions DocumentVersion[]
  documents        Document[]
  folders          Folder[]
  organizations    OrganizationMember[]
  sessions         Session[]
  integrations     UserIntegration[]
  preferences      UserPreference?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  description String?
  logo        String?
  website     String?
  type        OrganizationType     @default(COMPANY)
  settings    Json?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  isActive    Boolean              @default(true)
  documents   Document[]
  folders     Folder[]
  members     OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  permissions    String[]         @default([])
  joinedAt       DateTime         @default(now())
  isActive       Boolean          @default(true)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Document {
  id             String              @id @default(cuid())
  filename       String
  originalPath   String
  fileType       String
  mimeType       String
  fileSize       BigInt?
  channel        DocumentChannel     @default(WEB_UPLOAD)
  department     String?
  extractedText  String?
  metaData       Json?
  tags           String[]            @default([])
  userId         String
  organizationId String?
  visibility     DocumentVisibility  @default(PRIVATE)
  status         DocumentStatus      @default(PENDING)
  errorMessage   String?
  thumbnailPath  String?
  downloadCount  Int                 @default(0)
  isFavorite     Boolean             @default(false)
  uploadedAt     DateTime            @default(now())
  processedAt    DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  folderId       String?
  embeddings     DocumentEmbedding[]
  shares         DocumentShare[]
  versions       DocumentVersion[]
  folder         Folder?             @relation(fields: [folderId], references: [id])
  organization   Organization?       @relation(fields: [organizationId], references: [id])
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Folder {
  id             String           @id @default(cuid())
  name           String
  description    String?
  color          String?
  userId         String
  organizationId String?
  visibility     FolderVisibility @default(PRIVATE)
  parentId       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  documents      Document[]
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  parent         Folder?          @relation("FolderHierarchy", fields: [parentId], references: [id])
  children       Folder[]         @relation("FolderHierarchy")
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("folders")
}

model DocumentVersion {
  id            String   @id @default(cuid())
  documentId    String
  versionNumber Int
  filePath      String
  fileSize      BigInt
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  changeNotes   String?
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [uploadedBy], references: [id])

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model DocumentShare {
  id          String          @id @default(cuid())
  documentId  String
  sharedWith  String
  sharedBy    String
  permissions SharePermission @default(READ)
  expiresAt   DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  document    Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)
  recipient   User            @relation(fields: [sharedWith], references: [id], onDelete: Cascade)

  @@unique([documentId, sharedWith])
  @@map("document_shares")
}

model DocumentEmbedding {
  id         String   @id @default(cuid())
  documentId String
  content    String
  embedding  Float[]
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_embeddings")
}

model UserIntegration {
  id           String          @id @default(cuid())
  userId       String
  type         IntegrationType
  name         String
  isActive     Boolean         @default(true)
  lastSync     DateTime?
  settings     Json?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("user_integrations")
}

model UserPreference {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String?  @default("system")
  language           String?  @default("en")
  timezone           String?  @default("UTC")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  autoSync           Boolean  @default(true)
  defaultVisibility  String?  @default("PRIVATE")
  aiSuggestions      Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model ProcessingQueue {
  id          String    @id @default(cuid())
  documentId  String
  taskType    String
  priority    Int?      @default(5)
  status      String?   @default("PENDING")
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  error       String?

  @@map("processing_queue")
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION
}

enum OrganizationType {
  EDUCATIONAL
  COMPANY
  NON_PROFIT
  GOVERNMENT
  HEALTHCARE
  OTHER
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum DocumentChannel {
  WEB_UPLOAD
  EMAIL
  WHATSAPP
  SHAREPOINT
  FILE_SYSTEM
  DROPBOX
  GOOGLE_DRIVE
  SLACK
  TEAMS
  API
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum DocumentVisibility {
  PRIVATE
  ORGANIZATION
  SHARED
  PUBLIC
}

enum FolderVisibility {
  PRIVATE
  ORGANIZATION
  SHARED
}

enum SharePermission {
  READ
  WRITE
  ADMIN
}

enum IntegrationType {
  GMAIL
  GOOGLE_DRIVE
  DROPBOX
  SHAREPOINT
  SLACK
  TEAMS
  WHATSAPP
  OUTLOOK
}
